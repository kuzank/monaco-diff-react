{"version":3,"sources":["components/AdvancedTypescriptEditor.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["code_origin","code_modify","curLanguage","dialogVisible","renderSideBySide","AdvancedTypescriptEditor","_React$Component","Object","inherits","_super","_createSuper","props","_this","classCallCheck","this","call","handleCodeOriginChange","e","setState","window","localStorage","setItem","handleCodeModifyChange","handleLanguageChange","handleRenderSideBySideChange","state","reloadLocalStorage","createClass","key","value","_this2","options","react_default","a","createElement","className","style","width","onClick","marginLeft","fontSize","margin","es5","size","onChange","map","el","Option","label","onColor","offColor","lib","language","original","title","visible","onCancel","Body","type","autosize","minRows","placeholder","_this3","langData","getItem","rendData","setTimeout","React","Component","App","AdvancedTypescriptEditor_AdvancedTypescriptEditor","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d37763e.chunk.js","sourcesContent":["import React from 'react';\nimport { MonacoDiffEditor } from 'react-monaco-editor';\nimport { Dialog,Select,Switch,Input } from 'element-react';\n\nimport 'element-theme-default';\nimport '../common.css'\n\nconst code_origin = \"// your original code...\";\nconst code_modify = \"// a different version...\";\nconst curLanguage = 'java';\nconst dialogVisible = false;\nconst renderSideBySide = true;\n\nexport class AdvancedTypescriptEditor extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            code_origin,\n            code_modify,\n            curLanguage,\n            dialogVisible,\n            renderSideBySide\n        }\n\n        this.reloadLocalStorage();\n    }\n\n    render() {\n\n        const languages = ['java','typescript','python','sql','xml','yaml','shell','html','css','go','markdown'];\n        const options = {\n            renderSideBySide: this.state.renderSideBySide\n        };\n\n        return (\n            <div>\n                <div className=\"d-flex justify-content-around\"> \n                    <div style={{ width: '460px' }}></div>\n                    <span className=\"title pointer\" onClick={ () => this.setState({ dialogVisible: true }) }>\n                        Monaco-Diff\n                        \n                        <small style={{ marginLeft: '20px', fontSize: '14px'}}>编辑数据</small>\n                        <i className=\"el-icon-edit\" style={{ fontSize: '14px'}}></i>\n                    </span>\n                    <div className=\"d-flex\">\n                        <div style={{ margin: '4px'}} >\n                            language：\n                            <Select value={this.state.curLanguage} size=\"small\" onChange={ this.handleLanguageChange }>\n                                {\n                                    languages.map(el => {\n                                        return <Select.Option key={el} label={el} value={el} />\n                                    })\n                                }\n                            </Select>\n                        </div>\n                        <div style={{ margin: '4px' }} >\n                            Side-By-Side：\n                            <Switch\n                                value={this.state.renderSideBySide}\n                                size=\"small\"\n                                onColor=\"#13ce66\"\n                                offColor=\"#ff4949\"\n                                onChange={ this.handleRenderSideBySideChange }\n                            >\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"momacoClass\">\n                    <MonacoDiffEditor\n                        language={this.state.curLanguage}\n                        original={this.state.code_origin}\n                        value={this.state.code_modify}\n                        options={options}\n                    />\n                </div>\n                <Dialog\n                    title=\"Monaco Diff Config\"\n                    size=\"full\"\n                    visible={ this.state.dialogVisible }\n                    onCancel={ () => this.setState({ dialogVisible: false }) }\n                >\n                    <Dialog.Body>\n                        <div className=\"d-flex\">\n                            <div className=\"flex-1\" style={{ margin:'4px' }}>\n                                <div>原始数据</div>\n                                <Input\n                                    value={ this.state.code_origin }\n                                    type=\"textarea\"\n                                    onChange={ this.handleCodeOriginChange }\n                                    autosize={{ minRows: 37}}\n                                    placeholder=\"请输入原始数据\"\n                                />\n                            </div>\n                            <div className=\"flex-1\" style={{ margin:'4px' }}>\n                                <div>比对数据</div>\n                                <Input\n                                    value={ this.state.code_modify }\n                                    type=\"textarea\"\n                                    onChange={ this.handleCodeModifyChange }\n                                    autosize={{ minRows: 37}}\n                                    placeholder=\"请输入比对数据\"\n                                />\n                            </div>\n                        </div>\n                    </Dialog.Body>\n                </Dialog>\n            </div>\n        )\n    }\n\n    handleCodeOriginChange = e => {\n        this.setState({\n            code_origin: e\n        });\n        window.localStorage.setItem('monaco-editor-code_origin-value',e);\n    }\n\n    handleCodeModifyChange = e => {\n        this.setState({\n            code_modify: e\n        });\n        window.localStorage.setItem('monaco-editor-code_modify-value',e);\n    }\n\n    handleLanguageChange = e => {\n        this.setState({\n            curLanguage: e\n        });\n        window.localStorage.setItem('monaco-editor-language-value',e);\n    };\n\n    handleRenderSideBySideChange = e => {\n        this.setState({\n            renderSideBySide: e\n        });\n        window.localStorage.setItem('monaco-editor-renderSideBySide-value',e);\n    }\n    \n    reloadLocalStorage(){\n        const langData = window.localStorage.getItem('monaco-editor-language-value');\n        const rendData = window.localStorage.getItem('monaco-editor-renderSideBySide-value');\n        const code_origin = window.localStorage.getItem('monaco-editor-code_origin-value');\n        const code_modify = window.localStorage.getItem('monaco-editor-code_modify-value');\n\n        setTimeout(() => {\n            this.setState({\n                renderSideBySide: rendData,\n                curLanguage: langData ? langData : 'java',\n                code_origin:code_origin,\n                code_modify:code_modify\n            })\n        }, 50);;\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport './common.css'\nimport {AdvancedTypescriptEditor} from \"./components/AdvancedTypescriptEditor\";\n\nclass App extends Component {\n    render() {\n        return (\n            // <div style={{padding: 20}}>\n            //     <table width=\"100%\">\n            //         <tr>\n            //             <td>\n            //                 <h1><a id=\"Simple\">Simple TypeScript Editor</a></h1>\n            //                 <SimpleTypescriptEditor/>\n            //             </td>\n            //             <td>\n            //                 <h1><a id=\"Advanced\">Advanced TypeScript Editor</a></h1>\n            //                 <AdvancedTypescriptEditor/>\n            //             </td>\n            //         </tr>\n            //     </table>\n            // </div>\n            <AdvancedTypescriptEditor/>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}